@{
    ViewBag.Title = "Api";
}

<h3>Взаимодействие JavaScript и ASP.NET</h3>

<h4>Правила взаимодействия</h4>
<p>Все запросы к веб-приложению должны отправляться по адресу <code>~/Api/<em>название_метода</em></code> с параметрами, содержащимися в POST-запросе. Для удобства использования была написана функция <code>Request (command, data, result)</code>, которая принимает название команды, данные в формате JSON и вызываемую функцию (с одним аргументом) при получении результата.</p>
<p>Веб-приложение генерирует ответ в формате JSON, обязательным аргументом которого обязательно будет <code>success</code>, указывающий на успешность выполнения операции. Если <code>success = false</code>, то также в ответе должен присутствовать аргумент <code>message</code>, который содержит описание ошибки на русском языке.</p>
<p>При успешном выполнении операции в ответе должны содержаться аргументы, представленные в таблице ниже. В противном случае наличие этих аргументов не гарантируется.</p>

<h4>Функции программного интерфейса</h4>
<table class="little-table">
    <tr>
        <th>Функция</th>
        <th>Аргументы</th>
        <th>Возвращаемое значение</th>
        <th>Описание</th>
    </tr>
    <tr>
        <th colspan="4">Основная информация о пользователе</th>
    </tr>
    <tr>
        <td><code>getUserName</code></td>
        <td>-</td>
        <td>
            <ul class="clear">
                <li><strong>name</strong> — имя пользователя</li>
            </ul>
        </td>
        <td>Возвращает имя пользователя.</td>
    </tr>
    <tr>
        <td><code>getVisitorInfo</code></td>
        <td>-</td>
        <td>
            <ul class="clear">
                <li><strong>group</strong> — группа</li>
                <li><strong>course</strong> — курс</li>
                <li><strong>age</strong> — возраст</li>
            </ul>
        </td>
        <td>Получает более подробную информацию о посетителе музея.</td>
    </tr>
    <tr>
        <th colspan="4">Работа с игровыми объектами</th>
    </tr>
    <tr>
        <td><code>markGameObject</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
            </ul>
        </td>
        <td>-</td>
        <td>Отмечает/убирает отметку о том, что пользователь отметил объект.</td>
    </tr>
    <tr>
        <td><code>checkGameObject</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>state</strong> — статус отметки игрового объекта.</li>
            </ul>
        </td>
        <td>Отмечает/убирает отметку о том, что пользователь отметил объект.</td>
    </tr>
    <tr>
        <td><code>getGameObjectInfo</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
                <li><strong>full</strong> — возвращать полную информацию.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>name</strong> — название.</li>
                <li><strong>description</strong> — описание.</li>
                <li><strong>canNotified</strong> — может ли быть отмечен пользователем.</li>
                <li><strong>fullDescription</strong> — полное описание (если <code>full=true</code>).</li>
            </ul>
        </td>
        <td>Получает информацию об игровом объекте.</td>
    </tr>
</table>

<h3>Взаимодействие JavaScript и Unity</h3>

<h4>Правила взаимодействия</h4>
<p>Виртуальный музей, написанный на Unity, должен уметь вызывать функции JavaScript, отмеченные в таблице ниже знаком <span class="button button-small">JS</span>. Вызов этих функций ассинхронных, то есть ответа при вызове этих функций музей не получит.</p>
<p>Для реализации обратной связи с виртуальным музеем он должен уметь верно обрабатывать функции, представленные ниже и отмеченные знаком <span class="button button-small">Unity</span>. Этим функции должны находиться в GameObject с идентификатором <code>ApiGameObject</code>. Каждая функция должна или не принимать ни одного аргумента, или принимать либо один аргумент атомарного типа (число, строка), либо массив <code>object []</code>, порядок элементов в котором чётко соответствует списку аргументов функции в таблице. Тип аргумента как и его наличие определяется на основании таблицы функций программного интерфейса.</p>
<p>При возникновении ошибки, чтобы просигнализировать виртуальный музей, в нём будет вызываться метод <code>requestError</code>, который также описан ниже.</p>

<h4>Функции программного интерфейса</h4>
<table class="little-table">
    <tr>
        <th>Название функции</th>
        <th>Расположение</th>
        <th>Аргументы</th>
        <th>Описание</th>
    </tr>
    <tr>
        <td>requestError</td>
        <td class="cnt"><span class="button button-small">Unity</span></td>
        <td>
            <ul class="clear">
                <li><strong>text</strong> — текст ошибки.</li>
            </ul>
        </td>
        <td>Сигнализирует виртуальный музей об ошибке.</td>
    </tr>
    <tr>
        <td>showGameObjectPopup</td>
        <td class="cnt"><span class="button button-small">JS</span></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
            </ul>
        </td>
        <td>Показывает всплывающее окно, в котором располагается информация об игровом объекте.</td>
    </tr>
</table>