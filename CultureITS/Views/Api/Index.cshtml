@{
    ViewBag.Title = "Api";
    ViewBag.BreadCrumbs = new CultureITS.Helpers.BreadCrumbsBuilder()
        .Add(new CultureITS.Helpers.BreadCrumb() { Text = "Администрирование", Uri = @Url.Action("Index", "Home", new { area = "Admin" }) })
        .Generate(ViewBag.Title);
}

<h3>Взаимодействие JavaScript и ASP.NET</h3>

<h4>Правила взаимодействия</h4>
<p>Все запросы к веб-приложению должны отправляться по адресу <code>~/Api/<em>название_метода</em></code> с параметрами, содержащимися в POST-запросе. Для удобства использования была написана функция <code>Request (command, data, result)</code>, которая принимает название команды, данные в формате JSON и вызываемую функцию (с одним аргументом) при получении результата.</p>
<p>Веб-приложение генерирует ответ в формате JSON, обязательным аргументом которого обязательно будет <code>success</code>, указывающий на успешность выполнения операции. Если <code>success = false</code>, то также в ответе должен присутствовать аргумент <code>message</code>, который содержит описание ошибки на русском языке.</p>
<p>При успешном выполнении операции в ответе должны содержаться аргументы, представленные в таблице ниже. В противном случае наличие этих аргументов не гарантируется.</p>

<h4>Функции программного интерфейса</h4>
<table class="little-table">
    <tr>
        <th>Функция</th>
        <th>Аргументы</th>
        <th>Возвращаемое значение</th>
        <th>Описание</th>
    </tr>
    <tr>
        <th colspan="4">Основная информация о пользователе</th>
    </tr>
    <tr>
        <td><code>getUserName</code></td>
        <td>-</td>
        <td>
            <ul class="clear">
                <li><strong>name</strong> — имя пользователя</li>
            </ul>
        </td>
        <td>Возвращает имя пользователя.</td>
    </tr>
    <tr>
        <td><code>getVisitorInfo</code></td>
        <td>-</td>
        <td>
            <ul class="clear">
                <li><strong>group</strong> — группа</li>
                <li><strong>course</strong> — курс</li>
                <li><strong>age</strong> — возраст</li>
            </ul>
        </td>
        <td>Получает более подробную информацию о посетителе музея.</td>
    </tr>
    <tr>
        <th colspan="4">Работа с музейными экспонатами и материалами, связанными с ними</th>
    </tr>
    <tr>
        <td><code>markExhibit</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>state</strong> — статус отметки игрового объекта.</li>
            </ul>
        </td>
        <td>Отмечает/убирает отметку о том, что пользователь отметил объект.</td>
    </tr>
    <tr>
        <td><code>checkExhibit</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор игрового объекта.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>state</strong> — статус отметки игрового объекта.</li>
            </ul>
        </td>
        <td>Проверяет, отметил ли пользователь объект.</td>
    </tr>
    <tr>
        <td><code>getExhibitInfo</code></td>
        <td>
            <ul class="clear">
                <li><strong>code</strong> — идентификатор экспоната.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — системный идентификатор.</li>
                <li><strong>name</strong> — название.</li>
                <li><strong>location</strong> — местоположение.</li>
                <li><strong>description</strong> — описание.</li>
                <li><strong>haveApplication</strong> — есть ли иллюстрация.</li>
                <li><strong>state</strong> — статус отметки экспоната.</li>
            </ul>
        </td>
        <td>Получает информацию об игровом объекте.</td>
    </tr>
    <tr>
        <th colspan="4">Работа с подсистемой тестирования</th>
    </tr>
    <tr>
        <td><code>getTestInfo</code></td>
        <td>
            <ul class="clear">
                <li><strong>code</strong> — идентификатор теста.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — системный идентификатор теста.</li>
                <li><strong>title</strong> — заголовок.</li>
                <li><strong>topic</strong> — тема тестирования.</li>
                <li><strong>author</strong> — автор теста.</li>
                <li><strong>questionsCount</strong> — число вопросов.</li>
                <li><strong>resultsCount</strong> — число попыток.</li>
                <li><strong>dateLastResult</strong> — число последней попытки.</li>
                <li><strong>isOpened</strong> — есть ли незавершенное тестирование.</li>
            </ul>
        </td>
        <td>Получает основную информацию о тесте.</td>
    </tr>
    <tr>
        <td><code>startTest</code></td>
        <td>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор теста.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>testSessionId</strong> — идентификатор сеанса тестирования.</li>
                <li><strong>questionLeft</strong> — оставшееся число вопросов.</li>
            </ul>
        </td>
        <td>Начинает тест. Фактически заводит информацию в БД, что пользователь начал проходить тестирование.</td>
    </tr>
    <tr>
        <td><code>getTestQuestion</code></td>
        <td>
            <ul class="clear">
                <li><strong>testSessionId</strong> — идентификатор сеанса тестирования.</li>
                <li><strong>questionNumber</strong> — номер вопроса.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>number</strong> — номер вопроса.</li>
                <li><strong>text</strong> — текст вопроса.</li>
                <li><strong>hasImage</strong> — есть ли иллюстрация.</li>
                <li><strong>allowMultiChoise</strong> — позволяет выбрать множество объектов.</li>
                <li><strong>answers</strong> — массив номеров ответов.</li>
            </ul>
            <p class="alignleft">Элементы массива <strong>answers</strong>:</p>
            <ul class="clear">
                <li><strong>id</strong> — идентификатор ответа.</li>
                <li><strong>text</strong> — текст вопроса.</li>
                <li><strong>hasImage</strong> — есть ли иллюстрация.</li>
            </ul>
        </td>
        <td>Получает вопрос со списком ответов.</td>
    </tr>
    <tr>
        <td><code>setTestAnswer</code></td>
        <td>
            <ul class="clear">
                <li><strong>testSessionId</strong> — идентификатор сеанса тестирования.</li>
                <li><strong>questionNumber</strong> — номер вопроса.</li>
                <li><strong>answersNumbers</strong> — массив номеров ответов.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>result</strong> — результат ответа.</li>
                <li><strong>questionNext</strong> — номер следующего вопроса (если <code>result = 1</code>).</li>
            </ul>
            <p class="alignleft">Если <code>result != 1</code>, то прохождение теста окончено.</p>
        </td>
        <td>Возвращает ответ пользователя на сервер.</td>
    </tr>
    <tr>
        <td><code>getTestResult</code></td>
        <td>
            <ul class="clear">
                <li><strong>testSessionId</strong> — идентификатор сеанса тестирования.</li>
            </ul>
        </td>
        <td>
            <ul class="clear">
                <li><strong>date</strong> — дата прохождения тестирования.</li>
                <li><strong>questionsResults</strong> — массив, содержащий баллы за каждый вопрос.</li>
            </ul>
            <p class="alignleft">Элементы массива <strong>questionsResults</strong>:</p>
            <ul class="clear">
                <li><strong>number</strong> — номер вопроса.</li>
                <li><strong>result</strong> — полученное число баллов.</li>
                <li><strong>maxResult</strong> — максимальное число баллов.</li>
            </ul>

        </td>
        <td>Получает отчёт о проведении тестирования.</td>
    </tr>
</table>

<h3>Взаимодействие JavaScript и Unity</h3>

<h4>Правила взаимодействия</h4>
<p>Виртуальный музей, написанный на Unity, должен уметь вызывать функции JavaScript, отмеченные в таблице ниже знаком <span class="button button-small">JS</span>. Вызов этих функций ассинхронных, то есть ответа при вызове этих функций музей не получит.</p>
<p>Для реализации обратной связи с виртуальным музеем он должен уметь верно обрабатывать функции, представленные ниже и отмеченные знаком <span class="button button-small">Unity</span>. Этим функции должны находиться в GameObject с идентификатором <code>ApiGameObject</code>. Каждая функция должна или не принимать ни одного аргумента, или принимать либо один аргумент атомарного типа (число, строка), либо массив <code>object []</code>, порядок элементов в котором чётко соответствует списку аргументов функции в таблице. Тип аргумента как и его наличие определяется на основании таблицы функций программного интерфейса.</p>
<p>При возникновении ошибки, чтобы просигнализировать виртуальный музей, в нём будет вызываться метод <code>requestError</code>, который также описан ниже.</p>

<h4>Функции программного интерфейса</h4>
<table class="little-table">
    <tr>
        <th>Название функции</th>
        <th>Расположение</th>
        <th>Аргументы</th>
        <th>Описание</th>
    </tr>
    <tr>
        <td>requestError</td>
        <td class="cnt"><span class="button button-small">Unity</span></td>
        <td>
            <ul class="clear">
                <li><strong>text</strong> — текст ошибки.</li>
            </ul>
        </td>
        <td>Сигнализирует виртуальный музей об ошибке.</td>
    </tr>
    <tr>
        <td>setItemsInBag</td>
        <td class="cnt"><span class="button button-small">Unity</span></td>
        <td>
            <ul class="clear">
                <li><strong>items</strong> — строка с названиями объектов.</li>
            </ul>
        </td>
        <td>Получает все объекты из сумки пользователя. Формат строки — "item<sub>1</sub>|item<sub>2</sub>|...|item<sub>n</sub>".</td>
    </tr>
    <tr>
        <td>showTestPopup</td>
        <td class="cnt"><span class="button button-small">JS</span></td>
        <td>
            <ul class="clear">
                <li><strong>code</strong> — идентификатор теста.</li>
            </ul>
        </td>
        <td>Показывает всплывающее окно, в котором располагается тест.</td>
    </tr>
    <tr>
        <td>showExhibitPopup</td>
        <td class="cnt"><span class="button button-small">JS</span></td>
        <td>
            <ul class="clear">
                <li><strong>code</strong> — идентификатор экспоната.</li>
            </ul>
        </td>
        <td>Показывает всплывающее окно, в котором содержится информация об экспонате.</td>
    </tr>
    <tr>
        <td>putItemInBag</td>
        <td class="cnt"><span class="button button-small">JS</span></td>
        <td>
            <ul class="clear">
                <li><strong>name</strong> — название объекта.</li>
            </ul>
        </td>
        <td>Добавляет объект в сумку пользователя.</td>
    </tr>
    <tr>
        <td>getItemsInBag</td>
        <td class="cnt"><span class="button button-small">JS</span></td>
        <td>-</td>
        <td>Отправляет запрос на получение всех объектов из сумки пользователя для Unity.</td>
    </tr>
</table>
